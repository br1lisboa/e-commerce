generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // realtion
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  ProductImage ProductImage[]
  // 
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // relation
  product   Product @relation(fields: [productId], references: [id])
  productId String
  // 
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  UserAddress UserAddress?
  Order       Order[]
}

model Countries {
  id   String @id
  name String

  UserAddress UserAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  direction  String
  direction2 String?
  cp         String
  phone      String
  city       String

  // relation
  country     Countries @relation(fields: [countriesId], references: [id])
  countriesId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id              String    @id @default(uuid())
  subTotal        Float
  tax             Float
  total           Float
  productsInOrder Int
  isPaid          Boolean   @default(false)
  paidAt          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // relation
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  direction  String
  direction2 String?
  cp         String
  phone      String
  city       String
  country    String

  orderItem      Order  @relation(fields: [orderAddressId], references: [id])
  orderAddressId String @unique
}
